from .base_coverage_parser import BaseCoverageParserAndProcessor
from test_impact_logger import get_logger
import json
import pathlib

FILE_CONST = "files"
COV_TEST_CONST = 'covering_tests'
CONTEXTS = "contexts"

logger = get_logger("logger")
class CoverageParserAndProcessor(BaseCoverageParserAndProcessor):
    """
    Parser for data generated by the Python module coverage.

    Args:
        BaseCoverageParserAndProcessor (ABC): Base class
    """
    __json_obj = {}
    __coverage_data = {}

    def __init__(self, filepath: pathlib.Path):
        """
        Initialise CoverageParserAndProcessor and execute the loading, parsing, and processing of the coverage data stored at filepath.

        Args:
            filepath (pathlib.Path): Path to the file that contains our coverage data in json format.
        """
        try:
            with open(filepath, "rb") as f:
                self.__json_obj: dict = json.load(f)
            for file_name, file_info in self.__json_obj[FILE_CONST].items():
                self.__coverage_data[file_name] = self.parse_covering_tests(
                    file_info)
        except Exception as e:
            logger.error(e)
            raise e

    def parse_covering_tests(self, file_info):
        """ Parse our coverage data and return a set of all the tests that cover this file.

        Args:
            file_info (dict): Dictionary containing each line and the contexts that access this line.

        Returns:
            Set[String]: Returns a set of strings that contain the names of each test that covers this file.
        """
        covering_tests = []
        for line, contexts in file_info[CONTEXTS].items():
            covering_tests.extend(contexts)
        return [x for x in set(covering_tests) if x != ""]

    @property
    def coverage(self):
        """Getter for our coverage data

        Returns:
            dict: Dictionary containing a map of each file as the key and the tests that cover it as the value
        """
        return self.__coverage_data
